{"name":"MemDB","tagline":"The world first distributed ACID transactional 'MongoDB'","body":"- __Performance__ : In memory data access, up to 25,000 ops/shard (tested on EC2 c4.xlarge).\r\n\r\n- __Horizontally Scalable__ : Performance grows linearly by adding more shards.\r\n\r\n- __ACID Transaction__ : Full [ACID](https://en.wikipedia.org/wiki/ACID) transaction support on distributed environment.\r\n\r\n- __MongoDB Compatible__ : It's just a 'MongoDB' with transaction support, built-in 'Mongoose' support. \r\n\r\n![Architecture](https://github.com/memdb/memdb/wiki/images/architecture.png)\r\n\r\n## [The Wiki](https://github.com/memdb/memdb/wiki)\r\n\r\n## Quick Start\r\n\r\n### Install Dependencies\r\n\r\n* Install [Node.js](https://nodejs.org/download/)\r\n\r\n* Install [Redis](http://redis.io/download)\r\n\r\n* Install [MongoDB](https://www.mongodb.org/downloads)\r\n\r\n### Install MemDB\r\n\r\n* Install memdb\r\n```\r\nsudo npm install -g memdb-server\r\n```\r\n\r\n### Configure MemDB\r\n\r\nModify settings in `~/.memdb/memdb.conf.js` on your need. Please read comments carefully.\r\n\r\n### Start MemDB\r\n\r\nUse `memdbcluster` to control lifecycle of memdb server cluster\r\n```\r\nmemdbcluster [start | stop | status] [--conf=memdb.conf.js] [--shard=shardId]\r\n```\r\n\r\n### Play with memdb shell\r\n\r\n```js\r\n$ memdb -s s1 [--conf=memdb.conf.js] // specify the shard's id to connect\r\nMemDB shell\r\nconnected to 127.0.0.1:31017\r\nmemdb> db.insert('player', {_id : 1, name : 'rain'}) // insert a doc to 'player' collection\r\n'1'\r\nmemdb> db.find('player', 1)  // find doc by id\r\n{ _id: '1', name: 'rain' }\r\nmemdb> db.commit() // commit changes\r\ntrue\r\nmemdb> db.update('player', 1, {$set : {name : 'snow'}}) // update doc\r\n1\r\nmemdb> db.find('player', 1, 'name')\r\n{ name: 'snow' }\r\nmemdb> db.rollback() // rollback changes\r\ntrue\r\nmemdb> db.find('player', 1, 'name')\r\n{ name: 'rain' }\r\nmemdb> db.remove('player', 1) // remove doc\r\n1\r\nmemdb> db.commit()\r\ntrue\r\nmemdb> ^D (to exit)\r\n```\r\n\r\n### Nodejs Client with AutoConnection\r\n\r\n```js\r\nvar memdb = require('memdb-client');\r\n// just bluebird promise\r\nvar P = memdb.Promise;\r\n\r\nvar main = P.coroutine(function*(){\r\n    // All database access should via this autoconn object, you can preserve autoconn object in a global module that can be accessed anywhere\r\n    var autoconn = yield memdb.autoConnect({\r\n        shards : { // Specify all shards here\r\n            s1 : {host : '127.0.0.1', port : 31017},\r\n            s2 : {host : '127.0.0.1', port : 31018},\r\n        }\r\n    });\r\n\r\n    var doc = {_id : '1', name : 'rain', level : 1};\r\n\r\n    // Get player collection object\r\n    var Player = autoconn.collection('player');\r\n\r\n    // Make a transaction in shard s1\r\n    yield autoconn.transaction(P.coroutine(function*(){\r\n        // Upsert a doc (update if exist, insert if not exist)\r\n        yield Player.update(doc._id, doc, {upsert : true});\r\n        // Find the doc\r\n        var ret = yield Player.find(doc._id);\r\n        console.log(ret); // {_id : '1', name : 'rain', level : 1}\r\n    }), 's1'); // Auto commit after transaction\r\n\r\n    try{\r\n        // Make another transaction in shard s1\r\n        yield autoconn.transaction(P.coroutine(function*(){\r\n            // Update doc with $set modifier\r\n            yield Player.update(doc._id, {$set : {level : 2}});\r\n            // Find the changed doc with specified field\r\n            var ret = yield Player.find(doc._id, 'level');\r\n            console.log(ret); // {level : 2}\r\n            // Exception here!\r\n            throw new Error('Oops!');\r\n        }), 's1');\r\n    }\r\n    catch(err){ // Catch the exception\r\n        // Change is rolled back\r\n        yield autoconn.transaction(P.coroutine(function*(){\r\n            var ret = yield Player.find(doc._id, 'level');\r\n            console.log(ret); // {level : 1}\r\n        }), 's1');\r\n    }\r\n\r\n    // Make transcation in another shard\r\n    yield autoconn.transaction(P.coroutine(function*(){\r\n        yield Player.remove(doc._id);\r\n    }), 's2');\r\n\r\n    // Close all connections\r\n    yield autoconn.close();\r\n});\r\n\r\nif (require.main === module) {\r\n    main().finally(process.exit);\r\n}\r\n```\r\n\r\nTo run the sample above\r\n* Make sure you have started shard 's1' on localhost:31017, 's2' on localhost:31018.\r\n* Install npm dependencies\r\n```\r\nnpm install memdb-client\r\n```\r\n* run with node >= 0.12 with --harmony option\r\n```\r\nnode --harmony sample.js\r\n```\r\n\r\n### Mdbgoose\r\n\r\nMdbgoose is a modified [Mongoose](http://mongoosejs.com) version that work for memdb\r\n\r\n```js\r\nvar memdb = require('memdb-client');\r\nvar P = memdb.Promise;\r\nvar mdbgoose = memdb.goose;\r\n\r\n// Define player schema\r\nvar playerSchema = new mdbgoose.Schema({\r\n    _id : String,\r\n    name : String,\r\n    areaId : Number,\r\n    deviceType : Number,\r\n    deviceId : String,\r\n    items : [mdbgoose.SchemaTypes.Mixed],\r\n}, {collection : 'player'});\r\n// Define player model\r\nvar Player = mdbgoose.model('player', playerSchema);\r\n\r\nvar main = P.coroutine(function*(){\r\n    // Connect to memdb\r\n    yield mdbgoose.connectAsync({\r\n        shards : { // specify all shards here\r\n            s1 : {host : '127.0.0.1', port: 31017},\r\n            s2 : {host : '127.0.0.1', port: 31018},\r\n        }\r\n    });\r\n\r\n    // Make a transaction in s1\r\n    yield mdbgoose.transactionAsync(P.coroutine(function*(){\r\n\r\n        var player = new Player({\r\n            _id : 'p1',\r\n            name: 'rain',\r\n            areaId : 1,\r\n            deviceType : 1,\r\n            deviceId : 'id1',\r\n            items : [],\r\n        });\r\n\r\n        // insert a player\r\n        yield player.saveAsync();\r\n\r\n        // find player by id\r\n        var doc = yield Player.findByIdAsync('p1');\r\n        console.log('%j', doc);\r\n\r\n        // find player by areaId, return array of players\r\n        var docs = yield Player.findAsync({areaId : 1});\r\n        console.log('%j', docs);\r\n\r\n        // find player by deviceType and deviceId\r\n        player = yield Player.findOneAsync({deviceType : 1, deviceId : 'id1'});\r\n\r\n        // update player\r\n        player.areaId = 2;\r\n        yield player.saveAsync();\r\n\r\n        // remove the player\r\n        yield player.removeAsync();\r\n\r\n    }), 's1');\r\n});\r\n\r\nif (require.main === module) {\r\n    main().finally(process.exit);\r\n}\r\n```\r\n\r\nTo run the sample above:\r\n* Add the following index config in memdb.conf.js\r\n```\r\ncollections : {\r\n    player : {\r\n        indexes : [\r\n            {\r\n                keys : ['areaId'],\r\n            },\r\n            {\r\n                keys : ['deviceType', 'deviceId'],\r\n                unique : true,\r\n            },\r\n        ]\r\n    }\r\n}\r\n```\r\n* Restart memdb cluster\r\n```\r\nmemdbcluster stop\r\nmemdbcluster drop // drop existing data if database is not empty\r\nmemdbcluster start\r\n```\r\n* Make sure you have started shard 's1' on localhost:31017\r\n* Install npm dependencies\r\n```\r\nnpm install memdb-client\r\n```\r\n* Run with node >= 0.12 with --harmony option\r\n```\r\nnode --harmony sample.js\r\n```\r\n\r\n### Tips\r\n* Data is not bind to specified shard, you can access any data from any shard.\r\n* All operations inside a single transaction must be executed on one single shard.\r\n* Access the same data from the same shard if possible, which will maximize performance.\r\n\r\n__Please read [The Wiki](https://github.com/memdb/memdb/wiki) for further reference__\r\n\r\n## Contact Us\r\n* [Github Issue](https://github.com/memdb/memdb/issues)\r\n* Mailing list: [memdbd@googlegroups.com](https://groups.google.com/forum/#!forum/memdbd)\r\n* Email: [memdbd@gmail.com](mailto:memdbd@gmail.com)\r\n\r\n## License\r\n\r\nCopyright 2015 The MemDB Authors.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\nimplied. See the License for the specific language governing\r\npermissions and limitations under the License. See the AUTHORS file\r\nfor names of contributors.\r\n","google":"UA-65397800-1","note":"Don't delete this file! It's used internally to help with page regeneration."}