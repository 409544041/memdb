{"name":"MemDB","tagline":"Distributed Transactional In-Memory Database","body":"### Performance and Scalable\r\n* Fast in memory data access, up to 25,000 ops (single doc read/write) per shard (each shard take one CPU core).\r\n* System capacity is horizontally scalable, performance grows linearly by adding more shards.\r\n* No single point bottleneck, all part of system is scalable, unlimited capability potential.\r\n\r\n### True Distributed ACID Transaction\r\n* True [ACID](https://en.wikipedia.org/wiki/ACID)(Stands for Atomicity, Consistency, Isolation, Durability) transaction support on distributed environment.\r\n* MemDB brings ACID transaction support for MongoDB, on distributed environment! You can get full transaction support of traditional SQL database (like MySQL), while not losing the scalability of NoSQL database (like MongoDB).\r\n\r\n### MongoDB and Mongoose Compatible\r\n* It's just a 'MongoDB' with a cache layer which support distributed transaction.\r\n* Directly use of MongoDB's query API.\r\n* Built-in Mongoose support, easy to port existing Mongoose project to MemDB.\r\n\r\n### High Availability\r\n* Each shard is backed by one or more slaves, no single point of failure.\r\n\r\n## Links\r\n\r\n* Home Page: [http://memdb.org](http://memdb.org)\r\n* Github: [https://github.com/memdb/memdb](https://github.com/memdb/memdb)\r\n* Wiki : [https://github.com/memdb/memdb/wiki](https://github.com/memdb/memdb/wiki)\r\n* Mailing list: [memdbd@googlegroups.com](https://groups.google.com/forum/#!forum/memdbd)\r\n* Email: [memdbd@gmail.com](mailto:memdbd@gmail.com)\r\n\r\n## Quick Start\r\n\r\n### Install Dependencies\r\n\r\n* Install [Node.js](https://nodejs.org/download/)\r\n* Install [Redis](http://redis.io/download)\r\n* Install [MongoDB](https://www.mongodb.org/downloads)\r\n\r\nMake sure Redis and MongoDB has started\r\n\r\n### Install MemDB\r\n\r\n* MemDB should be installed globally\r\n```\r\nsudo npm install -g memdb-server\r\n```\r\n\r\n### Configure MemDB\r\n\r\nCopy default config file from `node_modules/memdb-server/memdb.conf.js` to `~/.memdb/` (mkdir if not exist), and modify it on your need. \r\nPlease read comments carefully.\r\n\r\n### Start MemDB\r\n\r\nUse `memdbcluster` to control lifecycle of memdb server cluster\r\n```\r\nmemdbcluster [start | stop | status] [--conf=memdb.conf.js] [--shard=shardId]\r\n```\r\n\r\n### Play with memdb shell\r\nSee the video bellow, note how ACID transaction work cross multiple shards.\r\n![memdbshell.gif](https://github.com/memdb/memdb/wiki/images/memdbshell.gif)\r\n\r\n### Mdbgoose\r\n\r\nMdbgoose is a modified __[Mongoose](http://mongoosejs.com)__ version that work for memdb\r\n\r\n```js\r\nvar memdb = require('memdb-client');\r\nvar P = memdb.Promise;\r\nvar mdbgoose = memdb.goose;\r\n\r\n// Define player schema\r\nvar playerSchema = new mdbgoose.Schema({\r\n    _id : String,\r\n    name : String,\r\n    areaId : Number,\r\n    deviceType : Number,\r\n    deviceId : String,\r\n    items : [mdbgoose.SchemaTypes.Mixed],\r\n}, {collection : 'player'});\r\n// Define player model\r\nvar Player = mdbgoose.model('player', playerSchema);\r\n\r\nvar main = P.coroutine(function*(){\r\n    // Connect to memdb\r\n    yield mdbgoose.connectAsync({\r\n        shards : { // specify all shards here\r\n            s1 : {host : '127.0.0.1', port: 31017},\r\n            s2 : {host : '127.0.0.1', port: 31018},\r\n        }\r\n    });\r\n\r\n    // Make a transaction in s1\r\n    yield mdbgoose.transactionAsync(P.coroutine(function*(){\r\n\r\n        var player = new Player({\r\n            _id : 'p1',\r\n            name: 'rain',\r\n            areaId : 1,\r\n            deviceType : 1,\r\n            deviceId : 'id1',\r\n            items : [],\r\n        });\r\n\r\n        // insert a player\r\n        yield player.saveAsync();\r\n\r\n        // find player by id\r\n        var doc = yield Player.findByIdAsync('p1');\r\n        console.log('%j', doc);\r\n\r\n        // find player by areaId, return array of players\r\n        var docs = yield Player.findAsync({areaId : 1});\r\n        console.log('%j', docs);\r\n\r\n        // find player by deviceType and deviceId\r\n        player = yield Player.findOneAsync({deviceType : 1, deviceId : 'id1'});\r\n\r\n        // update player\r\n        player.areaId = 2;\r\n        yield player.saveAsync();\r\n\r\n        // remove the player\r\n        yield player.removeAsync();\r\n\r\n    }), 's1');\r\n});\r\n\r\nif (require.main === module) {\r\n    main().finally(process.exit);\r\n}\r\n```\r\n\r\nTo run the sample above:\r\n* Add the following index config in memdb.conf.js\r\n```\r\ncollections : {\r\n    player : {\r\n        indexes : [\r\n            {\r\n                keys : ['areaId'],\r\n            },\r\n            {\r\n                keys : ['deviceType', 'deviceId'],\r\n                unique : true,\r\n            },\r\n        ]\r\n    }\r\n}\r\n```\r\n* restart memdb cluster\r\n```\r\nmemdbcluster stop\r\nmemdbcluster start\r\n```\r\n* Make sure you have started shard 's1' on localhost:31017\r\n* Install npm dependencies\r\n```\r\nnpm install memdb-client\r\n```\r\n* Run with node >= 0.12 with --harmony option\r\n```\r\nnode --harmony sample.js\r\n```\r\n\r\n__Check [here](https://github.com/memdb/memdb/wiki/API-Reference#mdbgoose) to see how to port your Mongoose project to Mdbgoose__\r\n\r\n\r\n### Architecture\r\n![architecture.png](https://github.com/memdb/memdb/wiki/images/architecture.png)\r\n\r\n### Relationship between MemDB and MongoDB\r\nMemDB is like a 'cache layer' built up on MongoDB which support distributed ACID transaction. \r\n\r\nMemDB has its own API which similar to MongoDB, however, you can still use MongoDB's native query API by directly access backend storage, here are the guidelines:\r\n* Do simple query and update through MemDB API, which is ACID transaction safe.\r\n* Do complex query through backend MongoDB, the read is not transaction safe.\r\n* Do complex update through backend MongoDB __offline__ (All MemDB shards are shutdown).\r\n\r\nHere are some basic rules for memdb:\r\n* Data is not bind to specified shard, you can access any data from any shard.\r\n* All operations inside a single transaction must be executed on one single shard.\r\n* Access the same data from the same shard if possible, which will maximize performance.\r\n\r\n### Further read\r\n* [The Wiki](https://github.com/memdb/memdb/wiki)\r\n\r\n## License\r\n\r\nCopyright 2015 The MemDB Authors.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\nimplied. See the License for the specific language governing\r\npermissions and limitations under the License. See the AUTHORS file\r\nfor names of contributors.\r\n","google":"UA-65397800-1","note":"Don't delete this file! It's used internally to help with page regeneration."}