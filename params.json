{"name":"MemDB","tagline":"Distributed transactional in memory database","body":"## Why memdb?\r\n\r\n* __Performance__ : Data access is mainly based on in process memory, which is extremely fast.\r\n\r\n* __Scalable__ : System is horizontally scalable by adding more shards.\r\n\r\n* __Transaction__ : Full transaction support like traditional database, data consistency is guaranteed. 'row' based locking mechanism is used.\r\n\r\n* __High Availability__ : Each shard is backed by one or more redis replica, you will never lose any commited data.\r\n\r\n__Comparison with other databases__\r\n\r\nDatabase | Performance      | Horizontally Scalable | Transaction Support | Data Structure  \r\n---------|------------------|-----------------------|---------------------|-----------------\r\nMySQL    | Medium (Disk I/O)| No                    | __Yes (InnoDB)__   | Row based       \r\nMongoDB  | Medium (Disk I/O)| __Yes__                   | No  (except some basic atomic modifier) | __Object(BSON)__   \r\nRedis    | __High (Memory)__ | __Yes__                   | No  (.multi can do some 'transaction like' thing) | Very Elemental  \r\n__MemDB__    | __High (Memory)__ | __Yes__                   | __Yes__                 | __Object(JSON)__   \r\n\r\n## Quick Start\r\n\r\n### Install Dependencies\r\n\r\n* Install [Node.js v0.12](https://nodejs.org/download/)\r\n\r\n* Install [Redis](http://redis.io/download)\r\n\r\n* Install [MongoDB](https://www.mongodb.org/downloads)\r\n\r\n### A Quick Sample\r\n\r\n```javascript\r\nvar memdb = require('memdb');\r\nvar P = require('bluebird');\r\n\r\n// memdb's config\r\nvar config = {\r\n    //shard Id (Must unique and immutable for each shard)\r\n    shard : 's1',\r\n    // Center backend storage, must be same for all shards\r\n    backend : {engine : 'mongodb', url : 'mongodb://localhost/memdb-test'},\r\n    // Center redis used for backendLock, must be same for all shards\r\n    redis : {host : '127.0.0.1', port : 6379},\r\n    // Redis data replication (for current shard)\r\n    slave : {host : '127.0.0.1', port : 6379, db : 1},\r\n};\r\n\r\nvar main = P.coroutine(function*(){\r\n    // Start a memdb shard with in-process mode\r\n    yield memdb.startServer(config);\r\n\r\n    // Create a new connection\r\n    var conn = yield memdb.connect();\r\n    // Get player collection\r\n    var Player = conn.collection('player');\r\n    // Insert a doc\r\n    var player = {_id : 'p1', name : 'rain', level : 1};\r\n    yield Player.insert(player);\r\n    // Commit changes\r\n    yield conn.commit();\r\n    // Update a field\r\n    yield Player.update(player._id, {$set : {level : 2}});\r\n    // Find the doc (only return specified field)\r\n    console.log(yield Player.find(player._id, 'level')); // should print {level : 2}\r\n    // Rollback changes\r\n    yield conn.rollback();\r\n    // Data restore to last commited state\r\n    console.log(yield Player.find(player._id, 'level')); // should print {level : 1}\r\n    // Remove doc\r\n    yield Player.remove(player._id);\r\n    // Commit change\r\n    yield conn.commit();\r\n    // close connection\r\n    yield conn.close();\r\n\r\n    // stop memdb server\r\n    yield memdb.stopServer();\r\n});\r\n\r\nif (require.main === module) {\r\n    main().catch(console.error).finally(process.exit);\r\n}\r\n```\r\n\r\n__Run the sample__\r\n```\r\nnpm install memdb bluebird\r\nnode --harmony sample.js\r\n```\r\n\r\n__Become a cluster__\r\n\r\nJust start more shards with __same backend and redis config__, and they will automatically become a MemDB cluster.\r\n\r\n## Documents\r\n\r\n* [The Wiki](https://github.com/rain1017/memdb/wiki)\r\n* [Home Page](http://memdb.org)\r\n* [API Docs](http://memdb.org/api)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}